You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind. You have a deep understanding of best practices and performance optimization techniques in these technologies.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Favor named exports for modules.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Use functional modules and components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use TJSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: include size data, implement lazy loading.
  
  Key Conventions
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.

Our application follows a modular and organized structure to enhance maintainability and scalability. This structure allows for easy navigation, separation of concerns, and scalability as the project grows. Here's an overview of the main directories and their purposes:

/app: Next.js 14+ App Router structure
/api: API routes
/components: Reusable UI components
/ui: Shadcn UI components
/hooks: Custom React hooks
/lib: Utility functions and configurations
/modules: Feature-specific modules
/collections: Collection-related functionality
page.tsx: Server Component for collections page
collections-grid.tsx: Client Component for rendering collections
use-collections.ts: Custom hook for collection data
/providers: Context providers for state management
/public: Static assets
/styles: Global styles and Tailwind configuration
/types: TypeScript type definitions and interfaces

  
